name: Build ARM64 Release

on:
  push:
    branches:
      - main  # 也可以换成 master 或其他你想要触发的分支名
  workflow_dispatch:  # 保留手动触发选项

jobs:
  build-linux-arm64:
    runs-on: ubuntu-22.04
    container:
      image: ubuntu:22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          apt-get update
          apt-get install -y curl wget software-properties-common
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          curl -fsSL https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add -
          apt-add-repository 'deb https://apt.kitware.com/ubuntu/ jammy main'

          # Install basic build tools
          apt-get update
          apt-get install -y build-essential nodejs git pkg-config cmake

          # Install Rust
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          export PATH="$HOME/.cargo/bin:$PATH"
          . $HOME/.cargo/env
          rustup target add aarch64-unknown-linux-gnu

          # Install pnpm globally
          npm install -g pnpm
          pnpm --version # 验证安装成功

          # Install cross-compilation tools
          apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

          # Install Tauri dependencies for ARM64
          dpkg --add-architecture arm64
          sed -i 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          tee /etc/apt/sources.list.d/arm64.list << EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted universe multiverse
          EOF

          apt-get update
          apt-get install -y libgtk-3-dev:arm64 libwebkit2gtk-4.0-dev:arm64 libwebkit2gtk-4.1-dev:arm64 libayatana-appindicator3-dev:arm64 librsvg2-dev:arm64 libsoup-3.0-dev:arm64 libjavascriptcoregtk-4.1-dev:arm64 libglib2.0-dev:arm64 libssl-dev:arm64 libgdk-pixbuf2.0-dev:arm64 libatk1.0-dev:arm64 libpango1.0-dev:arm64 libasound2-dev:arm64

          # Set cross-compilation environment
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV

      - name: Install Node.js dependencies
        run: pnpm install
      - name: Ensure AppImage target is enabled
        run: |
          if ! grep -q "appimage" src-tauri/tauri.conf.json; then
            echo "Enabling AppImage target in Tauri config..."
            sed -i 's/"targets": \["deb"\]/"targets": ["deb", "appimage"]/g' src-tauri/tauri.conf.json
            # 如果没有targets字段，则添加它
            if ! grep -q "targets" src-tauri/tauri.conf.json; then
              sed -i '/"bundle": {/a \      "targets": ["deb", "appimage"],' src-tauri/tauri.conf.json
            fi
            cat src-tauri/tauri.conf.json
          fi
      - name: Build Tauri manually
        shell: bash
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          . $HOME/.cargo/env

          # 检查环境
          ls -la # 列出当前目录内容
          ls -la src-tauri # 检查 src-tauri 目录内容
          cargo --version # 验证 cargo 可用          # 检查 Tauri 配置文件
          echo "====== Tauri 配置内容 ======"
          cat src-tauri/tauri.conf.json

          # 检查相关包是否已安装
          dpkg -l | grep libsoup
          dpkg -l | grep javascriptcore
          dpkg -l | grep webkit
          ls -la /usr/lib/aarch64-linux-gnu/pkgconfig/libsoup* || true
          ls -la /usr/lib/aarch64-linux-gnu/pkgconfig/javascriptcore* || true
          ls -la /usr/lib/aarch64-linux-gnu/pkgconfig/*webkit* || true

          # 检查pkg-config能否找到需要的库          pkg-config --list-all | grep javascriptcore
          pkg-config --list-all | grep webkit
          pkg-config --list-all | grep soup

          # 设置环境变量
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          export PKG_CONFIG_ALLOW_CROSS=1
          export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
          export PKG_CONFIG_SYSROOT_DIR=/usr
          export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1
          export PKG_CONFIG_ALLOW_SYSTEM_LIBS=1

          # 尝试直接使用 Cargo 构建
          cd src-tauri
          echo "====== 开始 Cargo 构建 ======"
          cargo metadata --format-version=1 || echo "Cargo metadata 失败"
          RUST_BACKTRACE=full cargo build --verbose --release --target aarch64-unknown-linux-gnu || true

          echo "====== Cargo 构建结束，检查状态 ======"
          ls -la target/aarch64-unknown-linux-gnu/release/ || echo "没有构建产物"

          cd ..
          echo "====== 尝试使用 Tauri 构建 ======"
          # 设置更多调试参数
          RUST_LOG=debug RUST_BACKTRACE=full pnpm exec tauri build --target aarch64-unknown-linux-gnu --verbose || echo "Tauri 构建失败，返回码: $?"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-artifacts
          path: |
            src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb
            src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
