name: Build ARM64 Release

on:
  push:
    branches:
      - main  # Change to master or other branch name as needed
  workflow_dispatch:  # Keep manual trigger option

jobs:
  build-linux-arm64:
    runs-on: ubuntu-22.04
    container:
      image: ubuntu:22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          apt-get update
          apt-get install -y curl wget software-properties-common
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          curl -fsSL https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add -
          apt-add-repository 'deb https://apt.kitware.com/ubuntu/ jammy main'

          # Install basic build tools
          apt-get update
          apt-get install -y build-essential nodejs git pkg-config cmake          # Install Rust
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

          # Source Rust environment properly
          export PATH="$HOME/.cargo/bin:$PATH"
          . $HOME/.cargo/env

          # Verify Rust installation
          rustc --version
          cargo --version

          # Add ARM64 target
          rustup target add aarch64-unknown-linux-gnu

          # Install pnpm globally
          npm install -g pnpm
          pnpm --version # Verify installation succeeded

          # Install cross-compilation tools
          apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

          # Install Tauri dependencies for ARM64
          dpkg --add-architecture arm64
          sed -i 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          tee /etc/apt/sources.list.d/arm64.list << EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted universe multiverse
          EOF

          apt-get update
          # Add dependencies needed for AppImage building
          apt-get install -y libgtk-3-dev:arm64 libwebkit2gtk-4.0-dev:arm64 libwebkit2gtk-4.1-dev:arm64 libayatana-appindicator3-dev:arm64 librsvg2-dev:arm64 libsoup-3.0-dev:arm64 libjavascriptcoregtk-4.1-dev:arm64 libglib2.0-dev:arm64 libssl-dev:arm64 libgdk-pixbuf2.0-dev:arm64 libatk1.0-dev:arm64 libpango1.0-dev:arm64 libasound2-dev:arm64 fuse:arm64 libfuse2:arm64

          # Set cross-compilation environment
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV

      - name: Install Node.js dependencies
        run: pnpm install

      - name: Ensure AppImage target is enabled
        run: |
          echo "Checking tauri.conf.json and ensuring AppImage target is enabled..."
          # Check if tauri.conf.json contains targets array
          if grep -q "\"targets\":" src-tauri/tauri.conf.json; then
            # If targets exists but doesn't contain appimage
            if ! grep -q "\"appimage\"" src-tauri/tauri.conf.json; then
              echo "Adding appimage to targets..."
              sed -i 's/"targets": \[\([^]]*\)\]/"targets": [\1, "appimage"]/' src-tauri/tauri.conf.json
            fi
          else
            # If no targets field, add it to the bundle config
            echo "Adding targets field..."
            sed -i '/"bundle": {/a \      "targets": ["deb", "appimage"],' src-tauri/tauri.conf.json
          fi
          echo "Modified tauri.conf.json:"
          cat src-tauri/tauri.conf.json

      - name: Build Tauri manually
        shell: bash
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          . $HOME/.cargo/env

          # Check environment
          ls -la # List current directory contents
          ls -la src-tauri # Check src-tauri directory contents
          cargo --version # Verify cargo is available

          # Check Tauri config file
          echo "====== Tauri Configuration Content ======"
          cat src-tauri/tauri.conf.json

          # Verify AppImage target is enabled
          echo "====== Verifying AppImage Target ======"
          if grep -q "\"appimage\"" src-tauri/tauri.conf.json; then
            echo "âœ“ AppImage target is already configured in tauri.conf.json"
          else
            echo "! AppImage target not found in tauri.conf.json, adding it..."
            sed -i 's/"targets": \[\([^]]*\)\]/"targets": [\1, "appimage"]/' src-tauri/tauri.conf.json
          fi          # Check if required packages are installed
          echo "====== Checking Key Dependencies ======"
          dpkg -l | grep libsoup
          dpkg -l | grep javascriptcore
          dpkg -l | grep webkit
          dpkg -l | grep fuse
          ls -la /usr/lib/aarch64-linux-gnu/pkgconfig/libsoup* || true
          ls -la /usr/lib/aarch64-linux-gnu/pkgconfig/javascriptcore* || true
          ls -la /usr/lib/aarch64-linux-gnu/pkgconfig/*webkit* || true

          # Check if pkg-config can find required libraries
          echo "====== Checking pkg-config ======"
          pkg-config --list-all | grep javascriptcore
          pkg-config --list-all | grep webkit
          pkg-config --list-all | grep soup
          pkg-config --list-all | grep fuse

          # Set environment variables
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          export PKG_CONFIG_ALLOW_CROSS=1
          export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
          export PKG_CONFIG_SYSROOT_DIR=/usr
          export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1
          export PKG_CONFIG_ALLOW_SYSTEM_LIBS=1          # Try building directly with Cargo
          cd src-tauri
          echo "====== Starting Cargo Build ======"
          cargo metadata --format-version=1 || echo "Cargo metadata failed"
          RUST_BACKTRACE=full cargo build --verbose --release --target aarch64-unknown-linux-gnu || true

          echo "====== Cargo Build Finished, Checking Status ======"
          ls -la target/aarch64-unknown-linux-gnu/release/ || echo "No build artifacts found"
          cd ..
          echo "====== Attempting Tauri Build ======"
          # Set additional debug parameters
          RUST_LOG=debug RUST_BACKTRACE=full pnpm exec tauri build --target aarch64-unknown-linux-gnu --verbose || echo "Tauri build failed, exit code: $?"

          echo "====== Checking Build Artifacts ======"          echo "DEB package:"
          find src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb -type f -name "*.deb" -ls || echo "No DEB package found"

          echo "AppImage package:"
          find src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage -type f -name "*.AppImage" -ls || echo "No AppImage package found"

          # Check if there are any AppImage-related errors in the build logs
          echo "====== Checking AppImage Build Logs ======"
          grep -i appimage target/aarch64-unknown-linux-gnu/release/build.log || echo "No AppImage build logs found"

      - name: Upload DEB artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: linux-arm64-deb-packages
          path: src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb
          if-no-files-found: warn
      - name: Upload AppImage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: linux-arm64-appimage-packages
          path: src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
          if-no-files-found: warn

      - name: Capture build logs on failure
        if: failure()
        run: |
          echo "====== Build Failed, Collecting Detailed Logs ======"
          echo "Checking Cargo error logs:"
          find src-tauri/target -name "*.log" -type f -exec ls -la {} \; || true
          find src-tauri/target -name "*.log" -type f -exec cat {} \; || true

          echo "Checking system dependencies:"
          dpkg -l | grep -E 'webkit|gtk|glib|libfuse' || true

          echo "Checking cross-compilation environment:"
          ls -la /usr/aarch64-linux-gnu/ || true
          ls -la /usr/lib/aarch64-linux-gnu/ || true
